{"version":3,"sources":["sw.js","index.js","img/gray.jpg"],"names":["registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","App","activePanel","header","id","separator","className","src","gray","size","onClick","open","connect","send","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render","document","getElementById","module","exports"],"mappings":"uOAUA,SAASA,EAAgBC,GACxBC,UAAUC,cACRC,SAASH,GACTI,MAAK,SAACC,GACNA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBG,QAChBT,UAAUC,cAAcS,WAK3BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMhBC,OAAM,SAACC,GACPH,QAAQG,MAAM,4CAA6CA,MA6B9D,IAAMC,EAAcC,QAAqC,cAA7BC,OAAOC,SAASC,UAEd,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCvDhC,SAASC,IACR,OACC,kBAAC,IAAD,CAAMC,YAAY,OAAOC,QAAQ,GAChC,kBAAC,IAAD,CAAOC,GAAG,QACT,kBAAC,IAAD,CAAKA,GAAG,WACP,kBAAC,IAAD,CAAOC,UAAU,QAChB,yBAAKC,UAAU,OAAOC,IAAKC,OAE5B,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAQC,KAAK,KAAKC,QAAS,WAAQb,OAAOc,KAAK,8BAA/C,kDAXNC,IAAQC,KAAK,gBD2DE,WACd,GAA6C,kBAAmBjC,UAAW,CAG1E,GADkB,IAAIkC,IAAIC,SAAwBlB,OAAOC,UAC3CkB,SAAWnB,OAAOC,SAASkB,OAIxC,OAGDnB,OAAOoB,iBAAiB,QAAQ,WAC/B,IAAMtC,EAAK,UAAMoC,SAAN,sBAEPpB,IA7CP,SAAiChB,GAEhCuC,MAAMvC,GACJI,MAAK,SAACoC,GAGe,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3C,UAAUC,cAAc2C,MAAMzC,MAAK,SAACC,GACnCA,EAAayC,aAAa1C,MAAK,WAC9Bc,OAAOC,SAAS4B,eAKlBhD,EAAgBC,MAGjBc,OAAM,WACNF,QAAQC,IAAI,oEA0BXmC,CAAwBhD,GAIxBC,UAAUC,cAAc2C,MAAMzC,MAAK,WAClCQ,QAAQC,IACP,gHAMFd,EAAgBC,OCrEpBiD,GAEAC,IAASC,OAAO,kBAAC7B,EAAD,MAAS8B,SAASC,eAAe,U,mBC/BjDC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.d1d657b4.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","// import 'core-js/features/map';\n// import 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { View, Panel, Cell, Div, Button, Card, CardGrid, Group } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './style.css'\nimport gray from './img/gray.jpg'\nimport connect from '@vkontakte/vk-connect';\nimport registerServiceWorker from './sw';\n\nconnect.send('VKWebAppInit');\n\nfunction App() {\n\treturn (\n\t\t<View activePanel=\"main\" header={false}>\n\t\t\t<Panel id=\"main\">\n\t\t\t\t<Div id=\"content\" >\n\t\t\t\t\t<Group separator=\"hide\">\n\t\t\t\t\t\t<img className=\"gray\" src={gray} />\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Div>\n\t\t\t\t\t\t<Button size=\"xl\" onClick={() => { window.open(\"ultimaterower.tumblr.com\"); }}>Открыть</Button>\n\t\t\t\t\t</Div>\n\t\t\t\t</Div>\n\t\t\t</Panel>\n\t\t</View>\n\t);\n}\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/gray.f188255a.jpg\";"],"sourceRoot":""}